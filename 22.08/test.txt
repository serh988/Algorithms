void test1(int n)
{
   if (n == 1)
      return;
   for (int i = 1; i <= n; i++)
       for (int j = 1; j <= n; j++)
           System.out.println("*");
           break;
}

функция содержит вложенные циклы, каждый из которых проходит по n итераций
общая временная сложность функции составляет O(n^2).



void test2(int n)
{
   int a = 0;
   for (i = 0; i < n; i++)
      for (j = n; j > i; j--)
          a = a + i + j;
}

функция также используются два вложенных цикла, внешний цикл выполняется n раз
а внутренний цикл уменьшается на одну итерацию с каждым проходом внешнего цикла.
Поэтому временная сложность функции также составляет O(n^2).

void test3(int n)
{
   int i, j, a = 0;
   for (i = n/2; i <=n; i++)
      for (j = 2; j <=n; j = j * 2)
          a = a + n / 2;   
}

Внешний цикл выполняется O(n/2) раз, что эквивалентно O(n), а внутренний цикл выполняется
O(log2(n)) раз. В итоге временная сложность функции составляет O(n * log2(n)).


void test4(int n)
{
   int a = 0, i = n;
   while (i > 0) {
      a += i;
      i /= 2;
   }
}

Цикл while в этой функции делит i на 2 в каждой итерации, и таким образом выполняется O(log2(n)) раз,
поэтому временная сложность функции составляет O(log2(n)).